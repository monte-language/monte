module unittest, convertToTerm, termFactory
export (baseSchema)
def t := termFactory

def nodeInfo := [
    ["null", 0]
    ["true", 0],
    ["false", 0],
    [".String.", 0],
    [".float64.", 0],
    [".char.", 0],
    [".int.", 0],
    [".tuple.", 0],
    [".bag", 0],
    [".attr.", 2]]

def asciiShift(bs):
    return ''.join(chr((ord(b) + 32) % 256) for b in bs)

def asciiUnshift(bs):
    return ''.join(chr((ord(b) - 32) % 256) for b in bs)


def zze(val):
  if val < 0:
    return ((val * 2) ^ -1) | 1
  else:
    return val * 2


def zzd(val):
    if val & 1:
        return (val / 2) ^ -1
    return val / 2


def dumpVarint(value):
    if value == 0:
        target = "\x00"
    else:
        target = []
    while value > 0:
        chunk = value & 0x7f
        value >>= 7
        if value > 0:
            target.append(chr(chunk | 0x80))
        else:
            target.append(chr(chunk))
    return asciiShift(target)

object baseSchema:
  to load(data):
  
      return null

   to dump(data):
      return null

def baseNodeNames := ["null", "true", "false", ".String.", ".float64.",
                      ".char.", ".int.", ".tuple.", ".bag.", ".attr."]

def wrap(f):
    def testf(assert):
        object moreAssert extends assert:
            to check(schema, term):
                return assert.equal(schema.load(schema.dump(term)), term)

        return f(moreAssert)
    return testf

def testNull(assert):
    assert.check(baseSchema, t.null())

def testInt(assert):
    assert.check(baseSchema, convertToTerm(0, null))
    assert.check(baseSchema, convertToTerm(-255, null))
    assert.check(baseSchema, convertToTerm(1048369, null))

def testBigint(assert):
    assert.check(baseSchema, convertToTerm(0x100000001))
    assert.check(baseSchema, convertToTerm(443464870465066586048))
    assert.check(baseSchema, convertToTerm(-443464870465066586048))

def testFloat(assert):
    assert.check(baseSchema, convertToTerm(0.0))
    assert.check(baseSchema, convertToTerm(-1.0))
    assert.check(baseSchema, convertToTerm(3.14))

def testString(assert):
    assert.check(baseSchema, convertToTerm(""))
    assert.check(baseSchema, convertToTerm("yes"))
    assert.check(baseSchema, convertToTerm("\u2603"))

def testTuple(assert):
    assert.check(baseSchema, convertToTerm([0, 1, "", []]))

def testMap(assert):
    assert.check(baseSchema, convertToTerm([1 => "yes", "no" => 0]))

def test_custom(assert):
    def sch := baseSchema.extend(["foo" => 1])
    assert.check(sch, t.foo(0))
    assert.check(sch, t.foo(t.foo(null)))

def tests := [testNull, ]
unittest([wrap(test) for test in tests])
